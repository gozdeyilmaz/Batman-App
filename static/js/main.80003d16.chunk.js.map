{"version":3,"sources":["component/Header.js","component/Batman.js","component/BatmanList.js","constant.js","pages/HomePage.js","pages/DetailsPage.js","container/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","id","Batman","props","movie","name","genres","rating","image","src","medium","style","height","fontSize","map","genre","key","Math","random","average","BatmanList","state","console","log","axios","get","then","resp","data","setState","this","show","React","Component","HomePage","summary","type","premiered","DetailsPage","match","params","width","Main","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80003d16.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n          <nav className=\"navbar navbar-expand-sm bg-primary navbar-dark\">\r\n            <div className=\"container\">\r\n              <Link className=\"navbar-brand\" to=\"/\">BATMAN TV SHOWS</Link>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                  \r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\nfunction Batman(props) {\r\n    const { name, genres, rating, image, id } = props.movie;\r\n    return (\r\n        <div className=\"col-lg-6 col-md-4 mb-4\">\r\n            <Link className=\"goDetails\" to={`/${id}`}>\r\n                <div className=\"card h-100\">\r\n                    <img className=\"card-img-top\" src={`${image.medium}`} style={{ height: \"292px\" }} />\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\">\r\n                            <p>{name}</p>\r\n                            <div>\r\n                                <span className=\"badge badge-primary\" style={{ fontSize: \"12px\" }}>\r\n                                    {genres.map(genre => {\r\n                                        return (\r\n                                            <span\r\n                                                key={Math.random()}\r\n                                                className=\"movie-card__subtitle\"\r\n                                            >{`${genre}`} <br></br>\r\n                                            </span>);\r\n                                    })}\r\n                                </span>\r\n                            </div>\r\n                            <div>\r\n                                <span className=\"badge badge-primary\" style={{ fontSize: \"12px\" }}>{`${rating.average}`}</span>\r\n                            </div>\r\n                            </h4>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Batman;\r\n","  \r\nimport React from 'react';\r\nimport { Batman } from \"../component\";\r\nimport { getMovie } from \"../constant\";\r\n\r\nclass BatmanList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movie: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"did mount\")\r\n        getMovie().then((data) => {\r\n            this.setState({\r\n                movie: data,\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const Movie = [<div className=\"row\"> \r\n            {\r\n                this.state.movie.map((movie) => {\r\n                    return <Batman key={movie.show.id} movie={movie.show} />;\r\n                })\r\n            }\r\n        </div>];\r\n            return Movie\r\n        \r\n    }\r\n}\r\nexport default BatmanList;","import axios from \"axios\";\r\nconst URL = \"https://api.tvmaze.com/search/shows?q=batman\";\r\n\r\nexport const getMovie = () => {\r\n    return axios.get(URL).then(resp => resp.data);\r\n};\r\n\r\n","import React from 'react';\r\nimport { BatmanList} from \"../component\";\r\n\r\n\r\nfunction HomePage() {    \r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-3\">\r\n                        </div>\r\n                        <div className=\"col-lg-9\">\r\n                            <BatmanList\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport axios from \"axios\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nlet name, summary, image, genres, rating, type, premiered\r\nclass DetailsPage extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      name: \"\",\r\n      summary: \"\",\r\n      image: \"\",\r\n      rating: \"\",\r\n      genres: \"\",\r\n      type: \"\",\r\n      premiered: \"\",\r\n    }\r\n  };\r\n\r\n  componentDidMount(){\r\n    axios.get(`https://api.tvmaze.com/shows/${this.props.match.params.id}`)\r\n      .then(resp => resp.data)\r\n      .then(data => ({name, summary,image, genres, rating, type, premiered } = data))\r\n      .then(data => this.setState({name, summary, image, genres, rating, type,premiered }))\r\n    \r\n    }\r\n\r\n    render(){\r\n      return (\r\n        <div className=\"container text-center\">\r\n          <div className=\"card mx-auto\"style={{width: \"18rem\"}}>\r\n           {/* <img alt={image.medium} className=\"card-img-top\" src={`${image.medium}`}/> */}\r\n            <Link className=\"goBackButton\" to=\"/\">X</Link>\r\n            <div className=\"card-body\">\r\n              <h1 className=\"card-title\">{`${name}`}</h1>\r\n              <div>\r\n                <span className=\"badge badge-primary\" style={{fontSize: \"12px\"}}>{`${genres}`}</span>\r\n                {/* <span className=\"badge badge-primary\" style={{fontSize: \"12px\"}}>{`${rating}`}</span> */}\r\n                <p className=\"card-text\">\r\n                            {`${summary}`}\r\n                        </p>   \r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    };\r\n  }\r\n\r\n  export default DetailsPage;\r\n\r\n  ","import React from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { HomePage, DetailsPage } from \"../pages\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route path=\"/:id\" component={DetailsPage} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Header} from \"./component\";\nimport { Link } from \"react-router-dom\";\nimport Main from \"./container/Main\";\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Link to = \"/\">\n      <Header />\n      </Link>\n      \n      \n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}